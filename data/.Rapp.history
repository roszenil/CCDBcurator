par(mfrow=c(2,1))
a<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
a
plot(a)
par(mfrow=c(2,1))#
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
a<-prune.extinct.taxa(a)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
b<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
b<-prune.extinct.taxa(b)
plot.phylo(b, show.tip.label=FALSE)
b<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
b<-drop.extinct(b)
plot.phylo(b, show.tip.label=FALSE)
par(mfrow=c(2,1))
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
b<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
plot.phylo(b, show.tip.label=FALSE)
par(mfrow=c(2,1))#
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
a<-drop.extinct(a)#
#
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
b<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
plot.phylo(b, show.tip.label=FALSE)
par(mfrow=c(2,1))
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
c<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)
plot.phylo(c, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
drop.extinct(b)
drop.extinct(c)
plot.phylo(c, show.tip.label=FALSE)
drop.extinct(c)
plot.phylo(c, show.tip.label=FALSE)
c<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)
drop.extinct(c)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)
par(mfrow=c(2,1))#
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
a<-drop.extinct(a)#
#
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")#
b<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
plot.phylo(b, show.tip.label=FALSE)
par(mfrow=c(2,1))#
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
a<-drop.extinct(a)#
#
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
b<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
plot.phylo(b, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
c<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
c<-drop.extinct(c)#
#
plot.phylo(c, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
c<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)
plot.phylo(c, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
d<-sim.bdtree(b=0.1,d=0.0.5, stop="taxa",n=10)
d<-sim.bdtree(b=0.1,d=0.5, stop="taxa",n=10)
plot.phylo(d, show.tip.label=FALSE)
d<-sim.bdtree(b=0.1,d=0.5, stop="taxa",n=10)
d<-sim.bdtree(b=0.1,d=0.05, stop="taxa",n=10)
d<-drop.extinct(d)
plot.phylo(d, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
plot.phylo(d, show.tip.label=FALSE)
d<-sim.bdtree(b=0.5,d=0.05, stop="taxa",n=10)
d<-drop.extinct(d)
plot.phylo(d, show.tip.label=FALSE)
d<-sim.bdtree(b=0.67,d=0.05, stop="taxa",n=10)
d<-drop.extinct(d)
plot.phylo(d, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
plot.phylo(d, show.tip.label=FALSE)
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
a<-drop.extinct(a)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
a<-drop.extinct(a)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
par(mfrow=c(2,1))#
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
a<-drop.extinct(a)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
a<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
a<-drop.extinct(a)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
b<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
plot.phylo(b, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
b<-sim.bdtree(b=0.3,d=0.28, stop="taxa",n=10)
plot.phylo(b, show.tip.label=FALSE)
b<-drop.extinct(b)
plot.phylo(b, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
plot.phylo(b, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
c<-sim.bdtree(b=0.9,d=0.2, stop="taxa",n=10)#
c<-drop.extinct(c)#
#
plot.phylo(c, show.tip.label=FALSE)
plot.phylo(a, show.tip.label=FALSE,edge.color="blue")
d<-sim.bdtree(b=0.1,d=0.05, stop="taxa",n=10)#
d<-drop.extinct(d)#
plot.phylo(d, show.tip.label=FALSE)
d<-sim.bdtree(b=0.2,d=0.05, stop="taxa",n=10)
d<-drop.extinct(d)
plot.phylo(d, show.tip.label=FALSE)
options(stringsAsFactors = FALSE)
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson")
CCDBv1<-read.delim("ccdbangio1.txt", header=TRUE,sep="\t", quote = "")
source("gametophytictranslate.R")
source("sporophytictranslate.R")
small.sample<-CCDBv1[1:100,]
cleandataset<-gametophytic.translator(small.sample[1,])#
cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}#
removingextras<-which(is.na(cleandataset[,2]))#
#
cleandataset<-cleandataset[-removingextras,]#
row.names(cleandataset) <- NULL
cleandataset
sporophytic.sample<-which(cleandataset$Type=="sporophytic")#
gametophytic.sample<-which(cleandataset$Type=="gametophytic")#
#
makeithaploid<-rep(0,dim(cleandataset)[1])#
makeithaploid[sporophytic.sample]<-floor(cleandataset$CountTranslation[sporophytic.sample]/2)#
makeithaploid[gametophytic.sample]<-cleandataset$CountTranslation[gametophytic.sample]#
cleandataset<-data.frame(cleandataset,Haploidnumber=makeithaploid)
cleandataset
cleandataset[1:14,]
cleandataset<-data.frame(cleandataset,HaploidNumber=makeithaploid)
cleandataset
cleandataset<-data.frame(cleandataset,HaploidNumber=makeithaploid)
cleandataset[1:14,]
small.sample<-CCDBv1[1:100,]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}#
removingextras<-which(is.na(cleandataset[,2]))#
#
cleandataset<-cleandataset[-removingextras,]#
row.names(cleandataset) <- NULL#
sporophytic.sample<-which(cleandataset$Type=="sporophytic")#
gametophytic.sample<-which(cleandataset$Type=="gametophytic")#
#
makeithaploid<-rep(0,dim(cleandataset)[1])#
makeithaploid[sporophytic.sample]<-floor(cleandataset$CountTranslation[sporophytic.sample]/2)#
makeithaploid[gametophytic.sample]<-cleandataset$CountTranslation[gametophytic.sample]#
cleandataset<-data.frame(cleandataset,HaploidNumber=makeithaploid)
cleandataset[1:50,]
CCDBv1[1,]
small.sample<-CCDBv1[1:10,]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
#cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	#cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}#
removingextras<-which(is.na(cleandataset[,2]))#
#
cleandataset<-cleandataset[-removingextras,]#
row.names(cleandataset) <- NULL#
sporophytic.sample<-which(cleandataset$Type=="sporophytic")#
gametophytic.sample<-which(cleandataset$Type=="gametophytic")#
#
makeithaploid<-rep(0,dim(cleandataset)[1])#
makeithaploid[sporophytic.sample]<-floor(cleandataset$CountTranslation[sporophytic.sample]/2)#
makeithaploid[gametophytic.sample]<-cleandataset$CountTranslation[gametophytic.sample]#
cleandataset<-data.frame(cleandataset,HaploidNumber=makeithaploid)
cleandataset
source("gametophytictranslate.R")
source("gametophytictranslate.R")
small.sample<-CCDBv1[1:10,]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
#cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	#cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}#
removingextras<-which(is.na(cleandataset[,2]))#
#
cleandataset<-cleandataset[-removingextras,]#
row.names(cleandataset) <- NULL
source("gametophytictranslate.R")
small.sample<-CCDBv1[1:10,]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
#cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	#cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}#
removingextras<-which(is.na(cleandataset[,2]))#
#
cleandataset<-cleandataset[-removingextras,]#
row.names(cleandataset) <- NULL
cleandataset
small.sample<-CCDBv1[1:10,]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
#cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	#cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}
cleandataset
source("gametophytictranslate.R")
small.sample<-CCDBv1[1:10,]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
#cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	#cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}
source("gametophytictranslate.R")
small.sample<-CCDBv1[1:10,]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
#cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	#cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}
cleandataset
aux1<-CCDBv1[1,]
species.name<-paste(aux1$Genus,"_",aux1$Species)
genus.name<-aux1$Genus
species.name
species.name<-paste(aux1$Genus,"_",aux1$Species,sep="")
x<-paste(aux1$Genus,"_",aux1$Species,sep="")
species.name
genus.name<-aux1$Genus
genus.name
a1<-unlist(strsplit(aux2, "(1)", fixed = TRUE, perl = FALSE, useBytes = FALSE)) #Removes (1) characters#
a1<-unlist(strsplit(as.character(a1), "(2)", fixed = TRUE, perl = FALSE, useBytes = FALSE))# Removes (2) characters#
a1<-unlist(strsplit(as.character(a1), "(3)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(4)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(5)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(1, 1)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(1, 2)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(1, 3)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(1, 1, 1)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a2<-unlist(strsplit(as.character(a1),"II",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a2<-unlist(strsplit(as.character(a2),"III",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a2<-unlist(strsplit(as.character(a1),"IV",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a2<-unlist(strsplit(as.character(a1),"V",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a2<-unlist(strsplit(as.character(a2),"I",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a3<-unlist(strsplit(as.character(a2), "or", fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a3<-unlist(strsplit(as.character(a3),"B",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a3<-unlist(strsplit(as.character(a3),"," ,fixed=TRUE,perl=FALSE, useBytes=FALSE))
aux2<-as.character(unlist(aux1[2]))
a1<-unlist(strsplit(aux2, "(1)", fixed = TRUE, perl = FALSE, useBytes = FALSE)) #Removes (1) characters#
a1<-unlist(strsplit(as.character(a1), "(2)", fixed = TRUE, perl = FALSE, useBytes = FALSE))# Removes (2) characters#
a1<-unlist(strsplit(as.character(a1), "(3)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(4)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(5)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(1, 1)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(1, 2)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(1, 3)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a1<-unlist(strsplit(as.character(a1), "(1, 1, 1)", fixed = TRUE, perl = FALSE, useBytes = FALSE))#
a2<-unlist(strsplit(as.character(a1),"II",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a2<-unlist(strsplit(as.character(a2),"III",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a2<-unlist(strsplit(as.character(a1),"IV",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a2<-unlist(strsplit(as.character(a1),"V",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a2<-unlist(strsplit(as.character(a2),"I",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a3<-unlist(strsplit(as.character(a2), "or", fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a3<-unlist(strsplit(as.character(a3),"B",fixed=TRUE,perl=FALSE,useBytes=FALSE))#
a3<-unlist(strsplit(as.character(a3),"," ,fixed=TRUE,perl=FALSE, useBytes=FALSE))
a3
long1<-length(a3)#
for(i in 1:long1){#
	a3[i]<-gsub("(\\+[^0-9])([0-9])","\\+\\2",a3[i])#
    a3[i]<-gsub("([0-9])(\\+[0-9])", "\\1 \\2", a3[i])#
	}#
a3<-unlist(strsplit(as.character(a3)," " ,fixed=TRUE,perl=FALSE, useBytes=FALSE))#you have to repea#
remove1<-grep("\\+[0-9]",a3, ignore.case=TRUE, perl=FALSE, fixed=FALSE, useBytes=FALSE, invert=FALSE) # Remove plus little intervals#
if(length(remove1)>0){#
a3<-a3[-remove1]}#
#
long1<-length(a3)#
a5<-list()#
for(i in 1:long1){#
	aux4<-0	#
	a4<-grep("[0-9]-[0-9]",a3[i], ignore.case=FALSE, perl=FALSE, fixed=FALSE, useBytes=FALSE, invert=FALSE) # Make intervals with the remainders#
		longa4<-length(a4)#
		if(longa4>0){#
			aux3<-as.numeric(unlist(strsplit(as.character(a3[i]),"[^0-9]")))#
			if(length(aux3)>2){#
				aux3<-aux3[-is.na(aux3)]#
			}#
			aux4<-seq(aux3[1],aux3[2],1) #Intervals: are there a sequence or first and last??#
			}else{#
				 aux4<-as.numeric(unlist(strsplit(as.character(a3[i]),"[^0-9]"))) } # The rest are numbers#
a5[[i]]<-aux4#
}
a5
index<-!is.na(unlist(a5)) #Remove everything that is left like quotations or symbols#
a6<-as.numeric(unlist(a5)[index])#
aux6<-which(a6==0)
f(length(aux6)>0){ #If there are some zeros left#
a6<-a6[-aux6]} # make it a numerical vector#
long3<-length(a6)
a6
if(length(aux6)>0){ #If there are some zeros left#
a6<-a6[-aux6]} # make it a numerical vector#
long3<-length(a6)
a6
small.table<-data.frame(rep(genus.name,long3), rep(species.name,long3),a6,rep("gametophytic",long3),rep(aux1$gametophytic,long3),stringsAsFactors=FALSE) #Making a table that is returned where we can see the translatio and the original
small.table
names(small.table)<-c("Genus","Species","CountTranslation", "Type","CountOriginal")
small.table
str(small.table)
aux1<-CCDBv1[2,]
species.name<-paste(aux1$Genus,"_",aux1$Species,sep="")
species.name
genus.name<-aux1$Genus
genus.name
aux2<-as.character(unlist(aux1[2]))
aux2
is.na(aux2)==TRUE
small.table<-data.frame(genus.name, species.name,NA,"gametophytic","NA",stringsAsFactors=FALSE)
small.table
names(small.table)<-c("Genus","Species","CountTranslation", "Type","CountOriginal")
small.table
source("gametophytictranslate.R")#
source("sporophytictranslate.R")
small.sample<-CCDBv1[1:10,]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
cleandataset<-sporophytic.translator(small.sample[1,])#
for(i in 2:100){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}
cleandataset
small.sample<-CCDBv1[1:10,]
cleandataset<-gametophytic.translator(small.sample[1,])
cleandataset
cleandataset<-sporophytic.translator(small.sample[1,])
cleandataset
small.sample<-CCDBv1[1:10,]
cleandataset<-gametophytic.translator(small.sample[1,])
cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[1,]))
cleandataset
for(i in 2:no.rows){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}
no.rows<-dim(small.sample)[1]
for(i in 2:no.rows){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}
cleandataset
removingextras<-which(is.na(cleandataset$CountTranslation))
cleandataset<-cleandataset[-removingextras,]
row.names(cleandataset) <- NULL
cleandataset
sporophytic.sample<-which(cleandataset$Type=="sporophytic")
gametophytic.sample<-which(cleandataset$Type=="gametophytic")
makeithaploid<-rep(0,dim(cleandataset)[1])
makeithaploid[sporophytic.sample]<-floor(cleandataset$CountTranslation[sporophytic.sample]/2)
makeithaploid[gametophytic.sample]<-cleandataset$CountTranslation[gametophytic.sample]
cleandataset<-data.frame(cleandataset,HaploidNumber=makeithaploid)
cleandataset
3%&2
3%%2
source("gametophytictranslate.R")#
source("sporophytictranslate.R")#
#
small.sample<-CCDBv1[1:10,]#
no.rows<-dim(small.sample)[1]#
#
cleandataset<-gametophytic.translator(small.sample[1,])#
cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[1,]))#
for(i in 2:no.rows){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(small.sample[i,]))#
	cleandataset<-rbind(cleandataset,sporophytic.translator(small.sample[i,]))#
}#
removingextras<-which(is.na(cleandataset$CountTranslation))#
#
cleandataset<-cleandataset[-removingextras,]#
row.names(cleandataset) <- NULL#
sporophytic.sample<-which(cleandataset$Type=="sporophytic")#
gametophytic.sample<-which(cleandataset$Type=="gametophytic")#
#
makeithaploid<-rep(0,dim(cleandataset)[1])#
makeithaploid[sporophytic.sample]<-floor(cleandataset$CountTranslation[sporophytic.sample]/2)#
makeithaploid[gametophytic.sample]<-cleandataset$CountTranslation[gametophytic.sample]#
Aneuploidy<- rep(0, dim(cleandataset)[1])#
Aneuploidy[sporophytic.sample]<-(cleandataset$CountTranslation[sporophytic.sample]%%2)#
cleandataset<-data.frame(cleandataset,HaploidNumber=makeithaploid, Aneuplody=Aneuploidy)
cleandataset
CCDBcurator<-function(cleanCCDBsample){#
no.rows<-dim(cleanCCDBsample)[1]#
#
cleandataset<-gametophytic.translator(cleanCCDBsample[1,])#
cleandataset<-rbind(cleandataset,sporophytic.translator(cleanCCDBsample[1,]))#
for(i in 2:no.rows){#
	cleandataset<-rbind(cleandataset,gametophytic.translator(cleanCCDBsample[i,]))#
	cleandataset<-rbind(cleandataset,sporophytic.translator(cleanCCDBsample[i,]))#
}#
removingextras<-which(is.na(cleandataset$CountTranslation))#
#
cleandataset<-cleandataset[-removingextras,]#
row.names(cleandataset) <- NULL#
sporophytic.sample<-which(cleandataset$Type=="sporophytic")#
gametophytic.sample<-which(cleandataset$Type=="gametophytic")#
#
makeithaploid<-rep(0,dim(cleandataset)[1])#
makeithaploid[sporophytic.sample]<-floor(cleandataset$CountTranslation[sporophytic.sample]/2)#
makeithaploid[gametophytic.sample]<-cleandataset$CountTranslation[gametophytic.sample]#
Aneuploidy<- rep(0, dim(cleandataset)[1])#
Aneuploidy[sporophytic.sample]<-(cleandataset$CountTranslation[sporophytic.sample]%%2)#
cleandataset<-data.frame(cleandataset,HaploidNumber=makeithaploid, Aneuplody=Aneuploidy)#
return(cleandataset)#
}
source(CCDBcurator.R)
source(CCDBcurator.R)
source("CCDBcurator.R")
small.sample<-CCDBv1[1:10,]
clean.sample<-CCDBcurator(small.sample)
clean.sample
index<-which(CCDBv1$Genus=="Acanthus")
index
acanthus.sample<-CCDBv1[index,]
Acanthus.clean<-CCDBcurator(acanthus.sample)
Acanthus.clean
genus.table<- table(Acanthus.clean$Genue,Acanthus.clean$HaploidSet)
genus.table
genus.table<- table(Acanthus.clean$Genue,Acanthus.clean$HaploidNumber)
genus.table<- table(Acanthus.clean$Genus,Acanthus.clean$HaploidNumber)
genus.table
species.table<-table(Acanthus.clean$Species, Acanthus.clean$HaploidNumber)
species.table
library("utils")
?package.skeleton()
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package")
package.skeleton(name="CCDBcurator",list=c("CCDBcurator.R","gametophytictranslate.R,sporophytictranslate.R"),path="~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package",code_files=c("CCDBcurator.R","gametophytictranslate.R,sporophytictranslate.R"))
package.skeleton(name="CCDBcurator",list=c("CCDBcurator.R","gametophytictranslate.R","sporophytictranslate.R"),path="~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package",code_files=c("CCDBcurator.R","gametophytictranslate.R","sporophytictranslate.R"))
package.skeleton(name="CCDBcurator",path="~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package",code_files=c("CCDBcurator.R","gametophytictranslate.R","sporophytictranslate.R"))
CCDBcurator_package.Rd
source("CCDBcurator_package.Rd")
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson")
CCDBv1<-read.delim("ccdbangio1.txt", header=TRUE,sep="\t", quote = "")
save(CCDBv1,file="AngiospermsCCDB.RData")
load("/Users/Roszenil/Documents/NESCent Apr:2015/chromcountsPoisson/AngiospermsCCDB.RData")
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package")
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package/data")
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package/CCDBcurator/data")
data(AngiospermsCCDB)
data("AngiospermsCCDB")
load("/Users/Roszenil/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package/CCDBcurator/data/AngiospermsCCDB.RData")
load("AngiospermsCCDB")
load("AngiospermsCCDB.Rdata")
AngiospermsCCDB[1,]
angio<-load("AngiospermsCCDB.Rdata")
angio[1,]
dim(angio)
CCDBv1<-read.delim("ccdbangio1.txt", header=TRUE,sep="\t", quote = "")
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson")
CCDBv1<-read.delim("ccdbangio1.txt", header=TRUE,sep="\t", quote = "")
angiosperms<-read.delim("ccdbangio1.txt", header=TRUE,sep="\t", quote = "")
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson")
angiospermdata<-read.delim("ccdbangio1.txt", header=TRUE,sep="\t", quote = "")
angiospermdata<-read.delim("ccdbangio1.txt", header=TRUE,sep="\t", quote = "")
save(angiospermdata,file="AngiospermsCCDB.RData")
rm(list=ls(all))
rm(list=ls())
angiospermdata
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package/data")
setwd("/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package/CCDBcurator/data")
setwd("~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package/CCDBcurator/data")
load("AngiospermCCDB")
load("AngiospermCCDB.Rdata")
load('~/Documents/NESCent Apr:2015/chromcountsPoisson/CCDBcurator package/CCDBcurator/data/AngiospermsCCDB.RData')
angiospermdatabase
angiospermdata[1,]
help("vignette")
